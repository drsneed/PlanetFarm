
function Tape()
{
  const BUFFER_SIZE = 20;     // this is a max number of items in buffer
                              // this number has to be at least twice bigger than number of visible items.
  const BUFFER_CHUNK_SIZE = 5;// this is a number of items that will be fetched from items source on scroll to fill the buffer.
  const SCROLL_DELTA = 60;    // dip, for mouse wheel
  
  const SCROLL_KINETIC_DELTA = 10.0;   // dip, for mouse wheel
  const SCROLL_KINETIC_DECEL = 0.90;   // deceleration 
  const SCROLL_KINETIC_OUT_DECEL = 0.74; // deceleration when head/tail reached
  const SCROLL_KINETIC_STEP_DELAY =  View.ANIMATION_TIMER_SPAN; // milliseconds

  const tape = this;  

  var template = tape.$( div.item.template );
      template.detach();

  var dataSource = eval( tape.attributes["items-source"] );

  var velocity = 0;

  var scrollDown;
  var scrollUp;

  var touchPosX;
  var touchPosY;
  var isOut = false;
  var stopAnimation;
  var idx = 0;

  // overridable event handlers:  
  //function onBufferChanged(firstIdx, lastIdx) {}
  //function onStartReached() {}
  //function onEndReached() {}
  
  function merge(div,data)
  {
    for (var field in div.$$([merge-code])) // for all DOM elements with merge-code attribute
    {
      if(field.tag == "img" || field.tag == "picture")
        field.@#src = data[ symbol(field.@#merge-code) ]; // get value of data.<field name> in put it as "src" attribute
      else
        field.html = data[ symbol(field.@#merge-code) ]; // get value of data.<field name> in put it in field.html
    }
  }
    
  // initial list setup:
  function fillList()
  {
    var idx = 0;
    for( var item in dataSource.range(0,BUFFER_SIZE) )
    {
      var div = template.clone(); // new instance of item from template
      tape.insert(div);
      // merge item fields into div content:
      merge(div,item);
      div.idx = idx++;
    }
    isOut = false;  
  }

  function scrollStepDown(scrollDelta, noOverflow = false)
  {
    var (scroll_left,scroll_top, scroll_right, scroll_bottom) = tape.scroll(#rect);
    var content_height = tape.box(#height,#content);
    
    function fetchMore()
    {
      var idx = tape.last.idx + 1; var last_idx = idx;
      for( var item in dataSource.range(idx,BUFFER_CHUNK_SIZE) )
      {
        var div = template.clone(); // make new instance of item from the template
        tape.insert(div);
        merge(div,item); // merge item fields into the div content
        div.idx = idx++; 
        //stdout.println("idx added",div.idx);
      } 
      if(idx == last_idx) 
        return true; // nothing was inserted - no more records. true - to mark end reached
      tape.update();
      content_height = tape.box(#height,#content);
      // drop first items that exceed BUFFER_SIZE
      while( tape.length > BUFFER_SIZE )
        tape.first.remove();
      
      tape.update();
      var content_height_after = tape.box(#height,#content); // adjust scroll position as
      scroll_top += content_height_after - content_height;   // we've removed first items.
      content_height = content_height_after;
      tape.postEvent("buffer-change", [tape.first.idx,tape.last.idx]);
      return false;
    }
    
    //stdout.println(scroll_bottom, scrollDelta ,content_height);    

    var scrolly = scroll_top + scrollDelta;
    
    if( scroll_bottom < scrollDelta) {
      // we need to pump more items in this virtual list:
      isOut = fetchMore();
      if(isOut && noOverflow) { 
        scrolly = content_height - tape.scroll(#height);
        isOut = false;
      }
      else 
        scrolly = scroll_top + scrollDelta;
    }
    else   
      isOut = false;

    tape.scrollTo( scroll_left, scrolly, false, true );
  }
    
  function scrollStepUp(scrollDelta, noOverflow = false)
  {
    var (scroll_left,scroll_top, scroll_right, scroll_bottom) = tape.scroll(#rect);
    //this.pastFirst = false;
    //this.pastLast = false;
       
    function fetchMore()
    {
      var first = tape.first;
      var idx = first.idx - 1; var first_idx = idx;
      var prev_top = first.box(#top,#inner,#parent);
      if(idx >= 0)
        for( var item in dataSource.range(idx,-BUFFER_CHUNK_SIZE) )
        {
          var div = template.clone(); // make new instance of item from template
          tape.insert(div,0);
          merge(div,item); // merge item fields into the div content
          div.idx = idx--;
        } 
      if( idx == first_idx ) 
        return true; // nothing was inserted - no more records. true - to mark start reached
      // drop last items that exceed BUFFER_SIZE
      while( tape.length > BUFFER_SIZE ) 
        tape.last.remove();
      tape.update();
      scroll_top = first.box(#top,#inner,#parent) - prev_top; // adjust scroll position.
      tape.postEvent("buffer-change", [tape.first.idx,tape.last.idx]);
      return false; 
    }

    var scrolly = scroll_top - scrollDelta;
  
    if( scrolly < 0 )
    {
      // we need to pump more items in this virtual list:      
      isOut = fetchMore();
      if(isOut && noOverflow) {
        scrolly = 0;
        isOut = false;
      }
      else 
        scrolly = scroll_top - scrollDelta;
    } 
    else
      isOut = false;
    tape.scrollTo( scroll_left, scrolly, false, true );
  }
  
  function scrollEnded()
  {
    function animateBackTop(distance) 
    {
      var scroll_y = tape.scroll(#top);
      var target_y = 0;
      var target_y_half = scroll_y / 2;
      var v = 1;
      tape.animate(
       :{
          scroll_y += v;
          if( scroll_y >= target_y ) { tape.scrollTo( 0, target_y, false, true ); isOut = false; return 0; }
          tape.scrollTo( 0, scroll_y, false, true );
          if( scroll_y < target_y_half ) ++v;  
          else if(--v == 0) v = 1;
          return SCROLL_KINETIC_STEP_DELAY;
        });
    }
    function animateBackBottom(distance) 
    {
      var scroll_y = tape.scroll(#top);
      var target_y = scroll_y - distance;
      var target_y_half = scroll_y - distance / 2;
      var v = 1;
      tape.animate(
       :{
          scroll_y -= v;
          if( scroll_y <= target_y ) { tape.scrollTo( 0, target_y, false, true ); isOut = false; return 0; }
          tape.scrollTo( 0, scroll_y, false, true );
          if( scroll_y > target_y_half ) ++v;  
          else  if( --v == 0 ) v = 1;
          return SCROLL_KINETIC_STEP_DELAY;
        });
    }
  
    var firstTop = tape.first.box(#top,#margin,#parent);
    var lastBottom = tape.last.box(#bottom,#margin,#parent);
    var height = tape.box(#height,#inner);
    if( firstTop > 0 )
      animateBackTop(firstTop);
    else if( lastBottom < height )
      animateBackBottom(height - lastBottom );
  }
  
  function doScrollAnimation()
  {
    if( tape.state.animating ) return;
    function animationStep()
    {
      velocity *= isOut ? SCROLL_KINETIC_OUT_DECEL : SCROLL_KINETIC_DECEL;
      if( Math.abs(velocity) < 0.5 || stopAnimation) 
      {
        tape.post(scrollEnded);
        return 0;
      }
      var v = velocity.toInteger();
      if( v < 0 ) scrollStepUp(-v); else scrollStepDown(v);
      return SCROLL_KINETIC_STEP_DELAY;
    }
    tape.animate(animationStep);
  }

  function scrollDownNormal(scrollDelta = SCROLL_DELTA) { 
    return scrollStepDown(scrollDelta * tape.toPixels(1dip,#height), true); 
  }
  function scrollUpNormal(scrollDelta = SCROLL_DELTA)   { 
    return scrollStepUp(scrollDelta * tape.toPixels(1dip,#height), true); 
  }
  
  function scrollDownKinetic(scrollDelta = SCROLL_KINETIC_DELTA)
  {
    var v = (velocity || 0.0);
    velocity = v + scrollDelta * tape.toPixels(1dip,#height);
    doScrollAnimation();
  }
  function scrollUpKinetic(scrollDelta = SCROLL_KINETIC_DELTA)
  {
    var v = (velocity || 0.0);
    velocity = v - scrollDelta * tape.toPixels(1dip,#height);
    doScrollAnimation();
  }


  tape << event mousewheel (evt) 
  {
    if( !isOut ) {
      if(evt.wheelDelta < 0 ) 
        scrollDown();
      else
        scrollUp();
    }
    return true;
  }

  tape << event mousedown (evt) {
    if( evt.mainButton ) {
      touchPosX = evt.x;
      touchPosY = evt.y;
    }
  }

  tape << event mousemove (evt) {
    if( evt.mainButton ) {
      var delta = evt.y - touchPosY;
      touchPosX = evt.x;
      touchPosY = evt.y;
      delta < 0 ? scrollStepDown(-delta) : scrollStepUp(delta);
    }
  } 

  if(tape.@#kinetic !== undefined)
  {
    scrollDown = scrollDownKinetic;
    scrollUp = scrollUpKinetic;
  }
  else
  {
    scrollDown = scrollDownNormal;
    scrollUp = scrollUpNormal;
  }

  fillList();
  
}
